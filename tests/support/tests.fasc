(#Y(si::bytecodes nil nil (15 0 77 77 15 1 77 77 77 77 77 77 19 10 2 29) #A(t (3) (#1="TESTS" ("CL" "MYAM" "ALEXANDRIA" "EARLY") si::dodefpackage)) #2=#P"/home/paul/unis/github/asgl/tests/support/tests.lisp" 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) (#1# si::select-package)) #2# 90) #Y(si::bytecodes nil nil (15 0 19 1 1 15 0 19 1 2 45 3 10 0 39 7 10 0 52 4 38 43 15 5 15 6 15 0 19 3 7 1 0 45 8 15 0 14 9 77 19 3 1 45 10 13 0 13 1 33 11 18 2 43 1 43 1 15 0 19 1 2 52 4 43 1 1 0 73 29) #A(t (12) (:tests myam::make-suite myam::get-test #:suite815 myam::*suite* "Create a new suite named ~A." "Unkown suite ~A." cerror #:g817 :in #:g818 (setf myam::get-test))) #2# 111) #Y(si::bytecodes nil nil (11 0 52 1 73 29) #A(t (2) (:definition-time myam::*default-compile-at*)) #2# 131) #Y(si::bytecodes nil nil (15 0 1 33 12 19 2 34 1 0 73 29) #3=#A(t (35) (tests::xteql tests::expected tests::result :test alexandria.0.dev::set-equal myam::test-passed :test-expr (alexandria.0.dev::set-equal tests::expected tests::result :test #'alexandria.0.dev::set-equal) myam::add-result #:g830 #:g831 0 :name myam::ignore-failure :function si::temp #Y(nil nil nil (27 45 15 10 0 51 2 35 1 0 29) #3# #2# 177) :report-function stream #4="Continue the test run." format #Y(nil nil nil (24 45 18 26 13 0 15 19 19 2 20 29) #3# #2# 177) si::make-restart si::*restart-clusters* myam::check-failure :reason "expected ~S~%but got ~S" myam::format-reason-to-string error t #Y(nil nil nil (26 77 14 29 72 2 29) #3# #2# 177) apply myam::test-failure #Y(tests::xteql nil nil (24 45 1 24 45 2 26 13 1 13 0 14 3 33 4 12 19 4 4 39 12 15 5 14 6 15 7 19 3 8 38 98 57 9 60 73 75 45 10 57 11 61 1 51 14 12 15 13 14 14 34 16 12 14 17 34 21 12 19 6 22 6 1 12 11 23 3 48 23 15 24 14 25 15 26 13 4 13 3 19 3 27 12 14 6 15 7 19 5 28 36 2 44 1 34 30 12 13 1 19 2 31 36 2 62 43 1 63 15 32 14 25 15 26 13 1 13 0 19 3 27 12 14 6 15 7 19 5 8 29) #3# #2# 177) si::fset)) #2# 177) #Y(si::bytecodes nil nil (15 0 1 34 12 19 2 35 1 0 73 29) #5=#A(t (36) (tests::alist-eql tests::expected tests::result :test equal alexandria.0.dev::set-equal myam::test-passed :test-expr (alexandria.0.dev::set-equal tests::expected tests::result :test #'equal) myam::add-result #:g844 #:g845 0 :name myam::ignore-failure :function si::temp #Y(nil nil nil (27 45 16 10 0 51 2 35 1 0 29) #5# #2# 311) :report-function stream #4# format #Y(nil nil nil (24 45 19 26 13 0 15 20 19 2 21 29) #5# #2# 311) si::make-restart si::*restart-clusters* myam::check-failure :reason "expected ~S~%but got ~S" myam::format-reason-to-string error t #Y(nil nil nil (26 77 14 30 72 2 29) #5# #2# 311) apply myam::test-failure #Y(tests::alist-eql nil nil (24 45 1 24 45 2 26 13 1 13 0 14 3 33 4 12 19 4 5 39 12 15 6 14 7 15 8 19 3 9 38 98 57 10 60 73 75 45 11 57 12 61 1 51 14 13 15 14 14 15 34 17 12 14 18 34 22 12 19 6 23 6 1 12 11 24 3 48 24 15 25 14 26 15 27 13 4 13 3 19 3 28 12 14 7 15 8 19 5 29 36 2 44 1 34 31 12 13 1 19 2 32 36 2 62 43 1 63 15 33 14 26 15 27 13 1 13 0 19 3 28 12 14 7 15 8 19 5 9 29) #5# #2# 311) si::fset)) #2# 311) #Y(si::bytecodes nil nil (15 0 1 97 12 19 2 98 1 0 73 29) #6=#A(t (99) (tests::check-semantic early::graph tests::expected tests::all-fn tests::one-fn tests::dc-fn tests::ds-fn tests::solutions :test alexandria.0.dev::set-equal alexandria.0.dev::setp myam::test-passed :test-expr (alexandria.0.dev::setp tests::solutions :test #'alexandria.0.dev::set-equal) myam::add-result #:g907 #:g908 0 :name myam::ignore-failure :function si::temp #Y(nil nil nil (27 45 21 10 0 51 2 35 1 0 29) #6# #2# 445) :report-function stream #4# format #Y(nil nil nil (24 45 24 26 13 0 15 25 19 2 26 29) #6# #2# 445) si::make-restart si::*restart-clusters* myam::check-failure :reason "solutions are not a set under set-equal:~%~S" myam::format-reason-to-string error t #Y(nil nil nil (26 77 14 35 72 2 29) #6# #2# 445) apply myam::test-failure tests::xteql tests::exists-p tests::extension #:a912 #:e911 eql (eql (not (null tests::solutions)) tests::exists-p) #:g914 #:g915 #Y(nil nil nil (27 45 21 10 0 51 2 35 1 0 29) #6# #2# 445) #Y(nil nil nil (24 45 24 26 13 0 15 25 19 2 26 29) #6# #2# 445) #7="~S evaluated to~%~S,~%which is not ~S to~%~S." #Y(nil nil nil (26 77 14 35 72 2 29) #6# #2# 445) member (member tests::extension tests::solutions :test #'alexandria.0.dev::set-equal) #:g921 #:g922 #Y(nil nil nil (27 45 21 10 0 51 2 35 1 0 29) #6# #2# 445) #Y(nil nil nil (24 45 24 26 13 0 15 25 19 2 26 29) #6# #2# 445) "~S was NIL." #Y(nil nil nil (26 77 14 35 72 2 29) #6# #2# 445) #:v927 (null tests::extension) #:g928 #:g929 #Y(nil nil nil (27 45 21 10 0 51 2 35 1 0 29) #6# #2# 445) #Y(nil nil nil (24 45 24 26 13 0 15 25 19 2 26 29) #6# #2# 445) "~S evaluated to ~S, which does not satisfy ~S" null #Y(nil nil nil (26 77 14 35 72 2 29) #6# #2# 445) early::order si::%dotimes-var tests::a tests::solution #Y(nil nil nil (24 45 72 26 13 1 13 0 19 2 52 29) #6# #2# 445) some #:a947 #:e946 (eql (not (null (some (lambda (tests::solution) (member tests::a tests::solution)) tests::solutions))) #8=(funcall tests::dc-fn early::graph tests::a)) #:g949 #:g950 #Y(nil nil nil (27 45 21 10 0 51 2 35 1 0 29) #6# #2# 445) #Y(nil nil nil (24 45 24 26 13 0 15 25 19 2 26 29) #6# #2# 445) #8# #Y(nil nil nil (26 77 14 35 72 2 29) #6# #2# 445) #Y(nil nil nil (24 45 72 26 13 1 13 0 19 2 52 29) #6# #2# 445) every #:a954 #:e953 (eql (every (lambda (tests::solution) (member tests::a tests::solution)) tests::solutions) #9=(funcall tests::ds-fn early::graph tests::a)) #:g956 #:g957 #Y(nil nil nil (27 45 21 10 0 51 2 35 1 0 29) #6# #2# 445) #Y(nil nil nil (24 45 24 26 13 0 15 25 19 2 26 29) #6# #2# 445) #9# #Y(nil nil nil (26 77 14 35 72 2 29) #6# #2# 445) 1+ < #Y(tests::check-semantic nil nil (24 45 1 24 45 2 24 45 3 24 45 4 24 45 5 24 45 6 26 13 3 13 5 20 1 23 45 7 13 0 14 8 33 9 12 19 3 10 39 12 15 11 14 12 15 13 19 3 14 38 94 57 15 60 71 75 45 16 57 17 61 1 49 14 18 15 19 14 20 34 22 12 14 23 34 27 12 19 6 28 6 1 12 11 29 3 48 29 15 30 14 31 15 32 13 3 19 2 33 12 14 12 15 13 19 5 34 36 2 44 1 34 36 12 13 1 19 2 37 36 2 62 43 1 63 15 38 14 31 15 32 13 0 19 2 33 12 14 12 15 13 19 5 14 13 5 13 0 19 2 39 13 3 13 6 20 1 23 47 1 40 45 41 10 2 76 76 12 13 1 46 42 46 43 13 0 10 1 17 44 39 12 15 11 14 12 15 45 19 3 14 38 106 57 46 60 77 75 45 47 57 17 61 1 55 14 18 15 19 14 20 34 48 12 14 23 34 49 12 19 6 28 6 1 12 11 29 3 48 29 15 30 14 31 15 50 15 40 13 4 15 44 13 3 19 5 33 12 14 12 15 45 19 5 34 36 2 44 1 34 51 12 13 1 19 2 37 36 2 62 43 1 63 15 38 14 31 15 50 15 40 13 1 15 44 13 0 19 5 33 12 14 12 15 45 19 5 14 43 2 10 1 39 121 13 0 13 2 14 8 33 9 12 19 4 52 39 12 15 11 14 12 15 53 19 3 14 38 94 57 54 60 71 75 45 55 57 17 61 1 49 14 18 15 19 14 20 34 56 12 14 23 34 57 12 19 6 28 6 1 12 11 29 3 48 29 15 30 14 31 15 58 15 53 19 2 33 12 14 12 15 53 19 5 34 36 2 44 1 34 59 12 13 1 19 2 37 36 2 62 43 1 63 15 38 14 31 15 58 15 53 19 2 33 12 14 12 15 53 19 5 14 38 124 10 0 45 60 10 0 76 39 12 15 11 14 12 15 61 19 3 14 38 102 57 62 60 75 75 45 63 57 17 61 1 53 14 18 15 19 14 20 34 64 12 14 23 34 65 12 19 6 28 6 1 12 11 29 3 48 29 15 30 14 31 15 66 15 41 13 3 15 67 19 4 33 12 14 12 15 61 19 5 34 36 2 44 1 34 68 12 13 1 19 2 37 36 2 62 43 1 63 15 38 14 31 15 66 15 41 13 0 15 67 19 4 33 12 14 12 15 61 19 5 14 43 1 43 2 13 6 19 1 69 45 70 8 0 45 71 38 308 34 73 12 13 2 19 2 74 76 76 12 13 4 13 8 13 0 20 2 23 12 46 75 46 76 13 0 10 1 17 44 39 12 15 11 14 12 15 77 19 3 14 38 106 57 78 60 77 75 45 79 57 17 61 1 55 14 18 15 19 14 20 34 80 12 14 23 34 81 12 19 6 28 6 1 12 11 29 3 48 29 15 30 14 31 15 50 15 82 13 4 15 44 13 3 19 5 33 12 14 12 15 77 19 5 34 36 2 44 1 34 83 12 13 1 19 2 37 36 2 62 43 1 63 15 38 14 31 15 50 15 82 13 1 15 44 13 0 19 5 33 12 14 12 15 77 19 5 14 43 2 34 84 12 13 2 19 2 85 12 13 3 13 8 13 0 20 2 23 12 46 86 46 87 13 0 10 1 17 44 39 12 15 11 14 12 15 88 19 3 14 38 106 57 89 60 77 75 45 90 57 17 61 1 55 14 18 15 19 14 20 34 91 12 14 23 34 92 12 19 6 28 6 1 12 11 29 3 48 29 15 30 14 31 15 50 15 93 13 4 15 44 13 3 19 5 33 12 14 12 15 88 19 5 34 36 2 44 1 34 94 12 13 1 19 2 37 36 2 62 43 1 63 15 38 14 31 15 50 15 93 13 1 15 44 13 0 19 5 33 12 14 12 15 88 19 5 14 43 2 10 0 16 95 51 0 75 13 0 13 1 19 2 96 40 -315 73 43 2 43 1 29) #6# #2# 445) si::fset)) #2# 445) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("ASGL" si::select-package)) #2# 1227) #Y(si::bytecodes nil nil (15 0 34 10 12 19 2 11 15 12 34 14 12 19 2 11 15 15 34 17 12 19 2 11 15 18 34 20 12 19 2 11 15 21 34 23 12 19 2 11 15 24 34 25 12 19 2 11 15 26 34 27 12 19 2 11 15 28 34 29 12 19 2 11 15 30 34 33 12 19 2 11 15 34 34 35 12 19 2 11 15 36 34 37 12 19 2 11 15 38 34 39 12 19 2 11 15 40 34 42 12 19 2 11 15 43 34 44 12 19 2 11 15 45 34 46 12 19 2 11 15 47 34 48 12 19 2 11 1 47 73 29) #10=#A(t (49) (asgl::$$complete-all early::graph :ee asgl::make-task :co asgl::make-semantic asgl::semantic asgl::task asgl::translate-problem asgl::collect-answer #Y(asgl::$$complete-all nil nil (24 45 1 26 14 2 19 1 3 12 14 4 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 4 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) si::fset asgl::$$stable-all :st #Y(asgl::$$stable-all nil nil (24 45 1 26 14 2 19 1 3 12 14 13 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 4 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$grounded-all :gr #Y(asgl::$$grounded-all nil nil (24 45 1 26 14 2 19 1 3 12 14 16 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 4 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$preferred-all :pr #Y(asgl::$$preferred-all nil nil (24 45 1 26 14 2 19 1 3 12 14 19 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 4 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$complete-one :se #Y(asgl::$$complete-one nil nil (24 45 1 26 14 22 19 1 3 12 14 4 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 4 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$stable-one #Y(asgl::$$stable-one nil nil (24 45 1 26 14 22 19 1 3 12 14 13 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 4 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$grounded-one #Y(asgl::$$grounded-one nil nil (24 45 1 26 14 22 19 1 3 12 14 16 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 4 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$preferred-one #Y(asgl::$$preferred-one nil nil (24 45 1 26 14 22 19 1 3 12 14 19 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 4 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$complete-dc asgl::a :dc #Y(asgl::$$complete-dc nil nil (24 45 1 24 45 31 26 14 32 13 0 19 2 3 12 14 4 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 5 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$stable-dc #Y(asgl::$$stable-dc nil nil (24 45 1 24 45 31 26 14 32 13 0 19 2 3 12 14 13 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 5 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$grounded-dc #Y(asgl::$$grounded-dc nil nil (24 45 1 24 45 31 26 14 32 13 0 19 2 3 12 14 16 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 5 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$preferred-dc #Y(asgl::$$preferred-dc nil nil (24 45 1 24 45 31 26 14 32 13 0 19 2 3 12 14 19 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 5 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$complete-ds :ds #Y(asgl::$$complete-ds nil nil (24 45 1 24 45 31 26 14 41 13 0 19 2 3 12 14 4 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 5 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$stable-ds #Y(asgl::$$stable-ds nil nil (24 45 1 24 45 31 26 14 41 13 0 19 2 3 12 14 13 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 5 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$grounded-ds #Y(asgl::$$grounded-ds nil nil (24 45 1 24 45 31 26 14 41 13 0 19 2 3 12 14 16 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 5 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247) asgl::$$preferred-ds #Y(asgl::$$preferred-ds nil nil (24 45 1 24 45 31 26 14 41 13 0 19 2 3 12 14 19 19 1 5 12 46 6 46 7 13 0 13 1 19 2 8 47 1 6 45 7 13 5 13 0 13 1 19 3 9 43 2 43 2 29) #10# #2# 1247))) #2# 1247) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) (#1# si::select-package)) #2# 2361) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #11=#A(t (11) (tests::check-complete tests::expected early::graph early::make-graph-from-adj asgl::$$complete-all asgl::$$complete-one asgl::$$complete-dc asgl::$$complete-ds tests::check-semantic #Y(tests::check-complete nil nil (24 45 1 24 45 2 26 13 0 19 1 3 12 13 1 33 4 12 33 5 12 33 6 12 33 7 12 19 6 8 29) #11# #2# 2382) si::fset)) #2# 2382) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #12=#A(t (11) (tests::check-grounded tests::expected early::graph early::make-graph-from-adj asgl::$$grounded-all asgl::$$grounded-one asgl::$$grounded-dc asgl::$$grounded-ds tests::check-semantic #Y(tests::check-grounded nil nil (24 45 1 24 45 2 26 13 0 19 1 3 12 13 1 33 4 12 33 5 12 33 6 12 33 7 12 19 6 8 29) #12# #2# 2647) si::fset)) #2# 2647) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #13=#A(t (11) (tests::check-preferred tests::expected early::graph early::make-graph-from-adj asgl::$$preferred-all asgl::$$preferred-one asgl::$$preferred-dc asgl::$$preferred-ds tests::check-semantic #Y(tests::check-preferred nil nil (24 45 1 24 45 2 26 13 0 19 1 3 12 13 1 33 4 12 33 5 12 33 6 12 33 7 12 19 6 8 29) #13# #2# 2912) si::fset)) #2# 2912) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #14=#A(t (11) (tests::check-stable tests::expected early::graph early::make-graph-from-adj asgl::$$stable-all asgl::$$stable-one asgl::$$stable-dc asgl::$$stable-ds tests::check-semantic #Y(tests::check-stable nil nil (24 45 1 24 45 2 26 13 0 19 1 3 12 13 1 33 4 12 33 5 12 33 6 12 33 7 12 19 6 8 29) #14# #2# 3182) si::fset)) #2# 3182) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #15=#A(t (11) (tests::seql tests::a tests::b (alexandria.0.dev::setp tests::a) si::assert-failure alexandria.0.dev::setp (alexandria.0.dev::setp tests::b) :test alexandria.0.dev::set-equal #Y(tests::seql nil nil (24 45 1 24 45 2 26 38 6 15 3 19 1 4 13 1 19 1 5 76 40 -12 38 6 15 6 19 1 4 13 0 19 1 5 76 40 -12 13 1 13 0 14 7 33 8 12 19 4 8 29) #15# #2# 3437) si::fset)) #2# 3437) #Y(si::bytecodes nil nil (15 0 1 16 12 19 2 17 1 0 73 29) #16=#A(t (18) (tests::read-extensions stream copy-readtable *readtable* #\, char #Y(nil nil nil (24 45 1 24 45 5 26 0 29) #16# #2# 3577) set-macro-character #\[ #\] t read-delimited-list #Y(nil nil nil (24 45 1 24 45 5 26 15 9 13 1 14 10 19 3 11 29) #16# #2# 3577) #\) get-macro-character read #Y(tests::read-extensions nil nil (24 45 1 26 77 19 1 2 48 3 15 4 34 6 12 19 2 7 15 8 34 12 12 19 2 7 15 9 15 13 19 1 14 12 19 2 7 13 0 19 1 15 44 1 29) #16# #2# 3577) si::fset)) #2# 3577) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #17=#A(t (7) (tests::read-extensions-from-string string make-string-input-stream tests::input tests::read-extensions #Y(tests::read-extensions-from-string nil nil (24 45 1 26 13 0 9 0 77 19 3 2 45 3 13 0 19 1 4 43 1 29) #17# #2# 3983) si::fset)) #2# 3983) #Y(si::bytecodes nil nil (15 0 1 23 12 14 24 9 2 19 4 25 1 0 73 29) #18=#A(t (26) (tests::with-tmp-file #:g964 #:g963 #:g965 si::dm-too-few-arguments #:g966 #:g967 pathname tests::name tests::body si::dm-too-many-arguments #:g974 symbol typep si::do-check-type let merge-pathnames (early::asgl-home) unwind-protect progn when probe-file delete-file #Y(tests::with-tmp-file nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 76 39 6 13 4 19 1 4 10 0 4 12 10 0 5 51 0 22 45 7 10 1 76 39 6 13 5 19 1 4 10 1 4 12 10 1 5 51 1 22 45 8 10 4 45 9 10 3 39 6 13 7 19 1 10 10 2 45 11 13 0 15 12 19 2 13 76 39 13 13 0 15 12 77 15 7 19 4 14 51 3 43 1 15 15 13 2 15 16 13 1 1 17 6 3 6 2 6 1 12 15 18 15 19 10 0 7 2 12 15 20 15 21 10 2 6 2 12 15 22 10 2 6 2 6 3 6 3 6 3 73 29) #18# #2# 4099) t si::fset)) #2# 4099) #Y(si::bytecodes nil nil (15 0 1 23 12 14 24 9 2 19 4 25 1 0 73 29) #19=#A(t (26) (tests::with-tmp-file-of-lines #:g977 #:g976 #:g978 si::dm-too-few-arguments #:g979 #:g980 pathname tests::lines tests::body si::dm-too-many-arguments #:g987 symbol typep si::do-check-type tests::with-tmp-file #20="tmp.apx" with-open-file tests::output (:direction :output) dolist tests::line (write-line tests::line tests::output) #Y(tests::with-tmp-file-of-lines nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 76 39 6 13 4 19 1 4 10 0 4 12 10 0 5 51 0 22 45 7 10 1 76 39 6 13 5 19 1 4 10 1 4 12 10 1 5 51 1 22 45 8 10 4 45 9 10 3 39 6 13 7 19 1 10 10 2 45 11 13 0 15 12 19 2 13 76 39 13 13 0 15 12 77 15 7 19 4 14 51 3 43 1 15 15 13 2 1 16 6 2 12 15 17 15 18 13 2 1 19 7 3 12 15 20 15 21 10 1 6 2 12 1 22 6 3 6 3 12 10 0 7 4 73 29) #19# #2# 4367) t si::fset)) #2# 4367) #Y(si::bytecodes nil nil (15 0 1 62 12 19 2 63 1 0 73 29) #21=#A(t (64) (tests::check-extensions tests::problem tests::expexted tests::lines early::asgl-home *default-pathname-defaults* #20# merge-pathnames pathname :direction :output open tests::output si::%dolist-var tests::line write-line close :abort t make-string-output-stream *standard-output* :fo "apx" :p :f asgl::main% get-output-stream-string tests::result tests::read-extensions-from-string #:a997 #:e996 tests::seql myam::test-passed :test-expr (tests::seql (tests::read-extensions-from-string tests::expexted) #22=(tests::read-extensions-from-string tests::result)) myam::add-result #:g999 #:g1000 0 :name myam::ignore-failure :function si::temp #Y(nil nil nil (27 45 42 10 0 51 2 35 1 0 29) #21# #2# 4640) :report-function stream #4# format #Y(nil nil nil (24 45 45 26 13 0 15 46 19 2 47 29) #21# #2# 4640) si::make-restart si::*restart-clusters* myam::check-failure :reason #7# #22# myam::format-reason-to-string error #Y(nil nil nil (26 77 14 18 72 2 29) #21# #2# 4640) apply myam::test-failure probe-file delete-file #Y(tests::check-extensions nil nil (24 45 1 24 45 2 24 45 3 26 19 0 4 48 5 15 6 19 0 4 12 19 2 7 45 8 64 250 13 0 14 9 14 10 19 3 11 45 12 64 47 10 2 45 13 75 45 14 38 18 10 1 4 51 0 13 0 13 2 19 2 15 10 1 5 51 1 10 1 40 -20 75 73 43 2 69 10 0 39 6 13 0 19 1 16 70 65 10 0 39 10 13 0 14 17 14 18 19 3 16 66 43 1 19 0 19 48 20 14 21 15 22 14 23 13 3 14 24 13 0 19 6 25 11 20 16 26 44 1 45 27 13 3 19 1 28 12 13 0 19 1 28 12 46 29 46 30 13 0 13 1 19 2 31 39 12 15 32 14 33 15 34 19 3 35 38 106 57 36 60 77 75 45 37 57 38 61 1 55 14 39 15 40 14 41 34 43 12 14 44 34 48 12 19 6 49 6 1 12 11 50 3 48 50 15 51 14 52 15 53 15 54 13 4 15 31 13 3 19 5 55 12 14 33 15 34 19 5 56 36 2 44 1 34 57 12 13 1 19 2 58 36 2 62 43 1 63 15 59 14 52 15 53 15 54 13 1 15 31 13 0 19 5 55 12 14 33 15 34 19 5 35 43 2 43 1 65 10 0 16 60 39 5 10 0 16 61 66 43 1 44 1 29) #21# #2# 4640) si::fset)) #2# 4640))
