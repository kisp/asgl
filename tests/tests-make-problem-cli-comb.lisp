(in-package :asgl)
(use-package :myam)
(in-suite :tests)
#|
TASK    SEMANTIC    TASK-SEMANTIC-T    GRAPH-INPUT-TYP    ARG-TYPE    ARG-CONTAINED-I    GRAPH-INPUT-FIL    ERROR                      
XX      GR          SYMBOL             PATHNAME           STRING      T                  T                  TASK-XX-ERROR              
EE      ST          STRING             STRING             NULL        NO-ARG             NIL                NON-EXISTING-FILE-ERROR    
SE      YY          STRING             PATHNAME           NULL        NO-ARG             T                  SEM-YY-ERROR               
DC      PR          SYMBOL             VECTOR             INTEGER     NIL                NO-FILE-INPUT      ARG-NOT-IN-GRAPH-ERROR     
DS      CO          STRING             CONS               NULL        NO-ARG             NO-FILE-INPUT      DECISION-W/O-ARG-ERROR     
EE      CO          SYMBOL             VECTOR             INTEGER     T                  NO-FILE-INPUT      ENUM-W/-ARG-ERROR          
|#

#|
TASK    SEMANTIC    TASK-SEMANTIC-T    GRAPH-INPUT-TYP    ARG-TYPE    ARG-CONTAINED-I    GRAPH-INPUT-FIL    
EE      PR          STRING             PATHNAME           NULL        NO-ARG             T                  
SE      ST          SYMBOL             VECTOR             NULL        NO-ARG             NO-FILE-INPUT      
DC      GR          STRING             CONS               INTEGER     T                  NO-FILE-INPUT      
DS      CO          SYMBOL             STRING             STRING      T                  T                  
EE      CO          SYMBOL             CONS               NULL        NO-ARG             NO-FILE-INPUT      
SE      PR          STRING             STRING             NULL        NO-ARG             T                  
EE      ST          STRING             VECTOR             NULL        NO-ARG             NO-FILE-INPUT      
EE      GR          SYMBOL             PATHNAME           NULL        NO-ARG             T                  
DC      CO          STRING             PATHNAME           STRING      T                  T                  
DS      PR          SYMBOL             VECTOR             INTEGER     T                  NO-FILE-INPUT      
DS      ST          STRING             PATHNAME           STRING      T                  T                  
SE      CO          SYMBOL             CONS               NULL        NO-ARG             NO-FILE-INPUT      
DC      CO          SYMBOL             VECTOR             INTEGER     T                  NO-FILE-INPUT      
DC      GR          SYMBOL             STRING             STRING      T                  T                  
DS      ST          SYMBOL             CONS               INTEGER     T                  NO-FILE-INPUT      
SE      GR          SYMBOL             PATHNAME           NULL        NO-ARG             T                  
DC      PR          STRING             PATHNAME           STRING      T                  T                  
EE      ST          SYMBOL             STRING             NULL        NO-ARG             T                  
DS      GR          STRING             VECTOR             INTEGER     T                  NO-FILE-INPUT      
DC      ST          STRING             STRING             STRING      T                  T                  
EE      PR          STRING             CONS               NULL        NO-ARG             NO-FILE-INPUT      
|#


(DEFTEST MAKE-PROBLEM.CLI.COMB.ERROR.1 "
TASK:                         XX
SEMANTIC:                     GR
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             PATHNAME
ARG-TYPE:                     STRING
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      T
ERROR:                        TASK-XX-ERROR
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (SIGNALS ERROR
   (MAKE-PROBLEM :GRAPH-INPUT PATHNAME :TASK-SEMANTIC :XX-GR
    :QUERY-ARGUMENT-NAME "foo"))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.ERROR.2 "
TASK:                         EE
SEMANTIC:                     ST
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             STRING
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      NIL
ERROR:                        NON-EXISTING-FILE-ERROR
"
 (SIGNALS ERROR
  (MAKE-PROBLEM :GRAPH-INPUT (NAMESTRING PATHNAME) :TASK-SEMANTIC "EE-ST"
   :QUERY-ARGUMENT-NAME NIL)))

(DEFTEST MAKE-PROBLEM.CLI.COMB.ERROR.3 "
TASK:                         SE
SEMANTIC:                     YY
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             PATHNAME
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      T
ERROR:                        SEM-YY-ERROR
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (SIGNALS ERROR
   (MAKE-PROBLEM :GRAPH-INPUT PATHNAME :TASK-SEMANTIC "SE-YY"
    :QUERY-ARGUMENT-NAME NIL))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.ERROR.4 "
TASK:                         DC
SEMANTIC:                     PR
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             VECTOR
ARG-TYPE:                     INTEGER
ARG-CONTAINED-IN-GRAPH:       NIL
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
ERROR:                        ARG-NOT-IN-GRAPH-ERROR
"
 (SIGNALS ERROR
  (MAKE-PROBLEM :GRAPH-INPUT #(NIL (0)) :TASK-SEMANTIC :DC-PR
   :QUERY-ARGUMENT-NAME 7)))

(DEFTEST MAKE-PROBLEM.CLI.COMB.ERROR.5 "
TASK:                         DS
SEMANTIC:                     CO
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             CONS
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
ERROR:                        DECISION-W/O-ARG-ERROR
"
 (SIGNALS ERROR
  (MAKE-PROBLEM :GRAPH-INPUT '(3 . 1) :TASK-SEMANTIC "DS-CO"
   :QUERY-ARGUMENT-NAME NIL)))

(DEFTEST MAKE-PROBLEM.CLI.COMB.ERROR.6 "
TASK:                         EE
SEMANTIC:                     CO
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             VECTOR
ARG-TYPE:                     INTEGER
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
ERROR:                        ENUM-W/-ARG-ERROR
"
 (SIGNALS ERROR
  (MAKE-PROBLEM :GRAPH-INPUT #(NIL (0)) :TASK-SEMANTIC :EE-CO
   :QUERY-ARGUMENT-NAME 0)))


(DEFTEST MAKE-PROBLEM.CLI.COMB.1 "
TASK:                         EE
SEMANTIC:                     PR
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             PATHNAME
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      T
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (LET ((PROBLEM
         (MAKE-PROBLEM :GRAPH-INPUT PATHNAME :TASK-SEMANTIC "EE-PR"
          :QUERY-ARGUMENT-NAME NIL)))
    (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
    (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
    (IS (EQL NIL (PROBLEM-QUERY-ARGUMENT PROBLEM)))
    (IS (EQUAL NIL (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
    (IS (EQUALP #("foo" "bar") (PROBLEM-ARGUMENT-NAMES PROBLEM)))
    (IS (EQL 'ASGL::EE-TASK (NAME (PROBLEM-TASK PROBLEM))))
    (IS (EQL 'ASGL::PREFERRED (NAME (PROBLEM-SEMANTIC PROBLEM)))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.2 "
TASK:                         SE
SEMANTIC:                     ST
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             VECTOR
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
"
 (LET ((PROBLEM
        (MAKE-PROBLEM :GRAPH-INPUT #(NIL (0)) :TASK-SEMANTIC :SE-ST
         :QUERY-ARGUMENT-NAME NIL)))
   (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
   (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
   (IS (EQL NIL (PROBLEM-QUERY-ARGUMENT PROBLEM)))
   (IS (EQUAL NIL (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
   (IS (EQUALP #(0 1) (PROBLEM-ARGUMENT-NAMES PROBLEM)))
   (IS (EQL 'ASGL::SE-TASK (NAME (PROBLEM-TASK PROBLEM))))
   (IS (EQL 'ASGL::STABLE (NAME (PROBLEM-SEMANTIC PROBLEM))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.3 "
TASK:                         DC
SEMANTIC:                     GR
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             CONS
ARG-TYPE:                     INTEGER
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
"
 (LET ((PROBLEM
        (MAKE-PROBLEM :GRAPH-INPUT '(2 . 4) :TASK-SEMANTIC "DC-GR"
         :QUERY-ARGUMENT-NAME 0)))
   (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
   (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
   (IS (EQL 0 (PROBLEM-QUERY-ARGUMENT PROBLEM)))
   (IS (EQUAL 0 (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
   (IS (EQUALP #(0 1) (PROBLEM-ARGUMENT-NAMES PROBLEM)))
   (IS (EQL 'ASGL::DC-TASK (NAME (PROBLEM-TASK PROBLEM))))
   (IS (EQL 'ASGL::GROUNDED (NAME (PROBLEM-SEMANTIC PROBLEM))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.4 "
TASK:                         DS
SEMANTIC:                     CO
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             STRING
ARG-TYPE:                     STRING
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      T
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (LET ((PROBLEM
         (MAKE-PROBLEM :GRAPH-INPUT (NAMESTRING PATHNAME) :TASK-SEMANTIC :DS-CO
          :QUERY-ARGUMENT-NAME "foo")))
    (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
    (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
    (IS (EQL 0 (PROBLEM-QUERY-ARGUMENT PROBLEM)))
    (IS (EQUAL "foo" (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
    (IS (EQUALP #("foo" "bar") (PROBLEM-ARGUMENT-NAMES PROBLEM)))
    (IS (EQL 'ASGL::DS-TASK (NAME (PROBLEM-TASK PROBLEM))))
    (IS (EQL 'ASGL::COMPLETE (NAME (PROBLEM-SEMANTIC PROBLEM)))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.5 "
TASK:                         EE
SEMANTIC:                     CO
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             CONS
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
"
 (LET ((PROBLEM
        (MAKE-PROBLEM :GRAPH-INPUT '(2 . 4) :TASK-SEMANTIC :EE-CO
         :QUERY-ARGUMENT-NAME NIL)))
   (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
   (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
   (IS (EQL NIL (PROBLEM-QUERY-ARGUMENT PROBLEM)))
   (IS (EQUAL NIL (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
   (IS (EQUALP #(0 1) (PROBLEM-ARGUMENT-NAMES PROBLEM)))
   (IS (EQL 'ASGL::EE-TASK (NAME (PROBLEM-TASK PROBLEM))))
   (IS (EQL 'ASGL::COMPLETE (NAME (PROBLEM-SEMANTIC PROBLEM))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.6 "
TASK:                         SE
SEMANTIC:                     PR
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             STRING
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      T
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (LET ((PROBLEM
         (MAKE-PROBLEM :GRAPH-INPUT (NAMESTRING PATHNAME) :TASK-SEMANTIC
          "SE-PR" :QUERY-ARGUMENT-NAME NIL)))
    (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
    (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
    (IS (EQL NIL (PROBLEM-QUERY-ARGUMENT PROBLEM)))
    (IS (EQUAL NIL (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
    (IS (EQUALP #("foo" "bar") (PROBLEM-ARGUMENT-NAMES PROBLEM)))
    (IS (EQL 'ASGL::SE-TASK (NAME (PROBLEM-TASK PROBLEM))))
    (IS (EQL 'ASGL::PREFERRED (NAME (PROBLEM-SEMANTIC PROBLEM)))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.7 "
TASK:                         EE
SEMANTIC:                     ST
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             VECTOR
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
"
 (LET ((PROBLEM
        (MAKE-PROBLEM :GRAPH-INPUT #(NIL (0)) :TASK-SEMANTIC "EE-ST"
         :QUERY-ARGUMENT-NAME NIL)))
   (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
   (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
   (IS (EQL NIL (PROBLEM-QUERY-ARGUMENT PROBLEM)))
   (IS (EQUAL NIL (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
   (IS (EQUALP #(0 1) (PROBLEM-ARGUMENT-NAMES PROBLEM)))
   (IS (EQL 'ASGL::EE-TASK (NAME (PROBLEM-TASK PROBLEM))))
   (IS (EQL 'ASGL::STABLE (NAME (PROBLEM-SEMANTIC PROBLEM))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.8 "
TASK:                         EE
SEMANTIC:                     GR
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             PATHNAME
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      T
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (LET ((PROBLEM
         (MAKE-PROBLEM :GRAPH-INPUT PATHNAME :TASK-SEMANTIC :EE-GR
          :QUERY-ARGUMENT-NAME NIL)))
    (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
    (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
    (IS (EQL NIL (PROBLEM-QUERY-ARGUMENT PROBLEM)))
    (IS (EQUAL NIL (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
    (IS (EQUALP #("foo" "bar") (PROBLEM-ARGUMENT-NAMES PROBLEM)))
    (IS (EQL 'ASGL::EE-TASK (NAME (PROBLEM-TASK PROBLEM))))
    (IS (EQL 'ASGL::GROUNDED (NAME (PROBLEM-SEMANTIC PROBLEM)))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.9 "
TASK:                         DC
SEMANTIC:                     CO
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             PATHNAME
ARG-TYPE:                     STRING
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      T
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (LET ((PROBLEM
         (MAKE-PROBLEM :GRAPH-INPUT PATHNAME :TASK-SEMANTIC "DC-CO"
          :QUERY-ARGUMENT-NAME "foo")))
    (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
    (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
    (IS (EQL 0 (PROBLEM-QUERY-ARGUMENT PROBLEM)))
    (IS (EQUAL "foo" (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
    (IS (EQUALP #("foo" "bar") (PROBLEM-ARGUMENT-NAMES PROBLEM)))
    (IS (EQL 'ASGL::DC-TASK (NAME (PROBLEM-TASK PROBLEM))))
    (IS (EQL 'ASGL::COMPLETE (NAME (PROBLEM-SEMANTIC PROBLEM)))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.10 "
TASK:                         DS
SEMANTIC:                     PR
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             VECTOR
ARG-TYPE:                     INTEGER
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
"
 (LET ((PROBLEM
        (MAKE-PROBLEM :GRAPH-INPUT #(NIL (0)) :TASK-SEMANTIC :DS-PR
         :QUERY-ARGUMENT-NAME 0)))
   (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
   (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
   (IS (EQL 0 (PROBLEM-QUERY-ARGUMENT PROBLEM)))
   (IS (EQUAL 0 (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
   (IS (EQUALP #(0 1) (PROBLEM-ARGUMENT-NAMES PROBLEM)))
   (IS (EQL 'ASGL::DS-TASK (NAME (PROBLEM-TASK PROBLEM))))
   (IS (EQL 'ASGL::PREFERRED (NAME (PROBLEM-SEMANTIC PROBLEM))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.11 "
TASK:                         DS
SEMANTIC:                     ST
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             PATHNAME
ARG-TYPE:                     STRING
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      T
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (LET ((PROBLEM
         (MAKE-PROBLEM :GRAPH-INPUT PATHNAME :TASK-SEMANTIC "DS-ST"
          :QUERY-ARGUMENT-NAME "foo")))
    (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
    (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
    (IS (EQL 0 (PROBLEM-QUERY-ARGUMENT PROBLEM)))
    (IS (EQUAL "foo" (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
    (IS (EQUALP #("foo" "bar") (PROBLEM-ARGUMENT-NAMES PROBLEM)))
    (IS (EQL 'ASGL::DS-TASK (NAME (PROBLEM-TASK PROBLEM))))
    (IS (EQL 'ASGL::STABLE (NAME (PROBLEM-SEMANTIC PROBLEM)))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.12 "
TASK:                         SE
SEMANTIC:                     CO
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             CONS
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
"
 (LET ((PROBLEM
        (MAKE-PROBLEM :GRAPH-INPUT '(2 . 4) :TASK-SEMANTIC :SE-CO
         :QUERY-ARGUMENT-NAME NIL)))
   (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
   (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
   (IS (EQL NIL (PROBLEM-QUERY-ARGUMENT PROBLEM)))
   (IS (EQUAL NIL (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
   (IS (EQUALP #(0 1) (PROBLEM-ARGUMENT-NAMES PROBLEM)))
   (IS (EQL 'ASGL::SE-TASK (NAME (PROBLEM-TASK PROBLEM))))
   (IS (EQL 'ASGL::COMPLETE (NAME (PROBLEM-SEMANTIC PROBLEM))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.13 "
TASK:                         DC
SEMANTIC:                     CO
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             VECTOR
ARG-TYPE:                     INTEGER
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
"
 (LET ((PROBLEM
        (MAKE-PROBLEM :GRAPH-INPUT #(NIL (0)) :TASK-SEMANTIC :DC-CO
         :QUERY-ARGUMENT-NAME 0)))
   (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
   (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
   (IS (EQL 0 (PROBLEM-QUERY-ARGUMENT PROBLEM)))
   (IS (EQUAL 0 (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
   (IS (EQUALP #(0 1) (PROBLEM-ARGUMENT-NAMES PROBLEM)))
   (IS (EQL 'ASGL::DC-TASK (NAME (PROBLEM-TASK PROBLEM))))
   (IS (EQL 'ASGL::COMPLETE (NAME (PROBLEM-SEMANTIC PROBLEM))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.14 "
TASK:                         DC
SEMANTIC:                     GR
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             STRING
ARG-TYPE:                     STRING
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      T
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (LET ((PROBLEM
         (MAKE-PROBLEM :GRAPH-INPUT (NAMESTRING PATHNAME) :TASK-SEMANTIC :DC-GR
          :QUERY-ARGUMENT-NAME "foo")))
    (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
    (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
    (IS (EQL 0 (PROBLEM-QUERY-ARGUMENT PROBLEM)))
    (IS (EQUAL "foo" (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
    (IS (EQUALP #("foo" "bar") (PROBLEM-ARGUMENT-NAMES PROBLEM)))
    (IS (EQL 'ASGL::DC-TASK (NAME (PROBLEM-TASK PROBLEM))))
    (IS (EQL 'ASGL::GROUNDED (NAME (PROBLEM-SEMANTIC PROBLEM)))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.15 "
TASK:                         DS
SEMANTIC:                     ST
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             CONS
ARG-TYPE:                     INTEGER
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
"
 (LET ((PROBLEM
        (MAKE-PROBLEM :GRAPH-INPUT '(2 . 4) :TASK-SEMANTIC :DS-ST
         :QUERY-ARGUMENT-NAME 0)))
   (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
   (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
   (IS (EQL 0 (PROBLEM-QUERY-ARGUMENT PROBLEM)))
   (IS (EQUAL 0 (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
   (IS (EQUALP #(0 1) (PROBLEM-ARGUMENT-NAMES PROBLEM)))
   (IS (EQL 'ASGL::DS-TASK (NAME (PROBLEM-TASK PROBLEM))))
   (IS (EQL 'ASGL::STABLE (NAME (PROBLEM-SEMANTIC PROBLEM))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.16 "
TASK:                         SE
SEMANTIC:                     GR
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             PATHNAME
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      T
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (LET ((PROBLEM
         (MAKE-PROBLEM :GRAPH-INPUT PATHNAME :TASK-SEMANTIC :SE-GR
          :QUERY-ARGUMENT-NAME NIL)))
    (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
    (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
    (IS (EQL NIL (PROBLEM-QUERY-ARGUMENT PROBLEM)))
    (IS (EQUAL NIL (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
    (IS (EQUALP #("foo" "bar") (PROBLEM-ARGUMENT-NAMES PROBLEM)))
    (IS (EQL 'ASGL::SE-TASK (NAME (PROBLEM-TASK PROBLEM))))
    (IS (EQL 'ASGL::GROUNDED (NAME (PROBLEM-SEMANTIC PROBLEM)))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.17 "
TASK:                         DC
SEMANTIC:                     PR
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             PATHNAME
ARG-TYPE:                     STRING
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      T
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (LET ((PROBLEM
         (MAKE-PROBLEM :GRAPH-INPUT PATHNAME :TASK-SEMANTIC "DC-PR"
          :QUERY-ARGUMENT-NAME "foo")))
    (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
    (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
    (IS (EQL 0 (PROBLEM-QUERY-ARGUMENT PROBLEM)))
    (IS (EQUAL "foo" (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
    (IS (EQUALP #("foo" "bar") (PROBLEM-ARGUMENT-NAMES PROBLEM)))
    (IS (EQL 'ASGL::DC-TASK (NAME (PROBLEM-TASK PROBLEM))))
    (IS (EQL 'ASGL::PREFERRED (NAME (PROBLEM-SEMANTIC PROBLEM)))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.18 "
TASK:                         EE
SEMANTIC:                     ST
TASK-SEMANTIC-TYPE:           SYMBOL
GRAPH-INPUT-TYPE:             STRING
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      T
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (LET ((PROBLEM
         (MAKE-PROBLEM :GRAPH-INPUT (NAMESTRING PATHNAME) :TASK-SEMANTIC :EE-ST
          :QUERY-ARGUMENT-NAME NIL)))
    (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
    (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
    (IS (EQL NIL (PROBLEM-QUERY-ARGUMENT PROBLEM)))
    (IS (EQUAL NIL (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
    (IS (EQUALP #("foo" "bar") (PROBLEM-ARGUMENT-NAMES PROBLEM)))
    (IS (EQL 'ASGL::EE-TASK (NAME (PROBLEM-TASK PROBLEM))))
    (IS (EQL 'ASGL::STABLE (NAME (PROBLEM-SEMANTIC PROBLEM)))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.19 "
TASK:                         DS
SEMANTIC:                     GR
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             VECTOR
ARG-TYPE:                     INTEGER
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
"
 (LET ((PROBLEM
        (MAKE-PROBLEM :GRAPH-INPUT #(NIL (0)) :TASK-SEMANTIC "DS-GR"
         :QUERY-ARGUMENT-NAME 0)))
   (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
   (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
   (IS (EQL 0 (PROBLEM-QUERY-ARGUMENT PROBLEM)))
   (IS (EQUAL 0 (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
   (IS (EQUALP #(0 1) (PROBLEM-ARGUMENT-NAMES PROBLEM)))
   (IS (EQL 'ASGL::DS-TASK (NAME (PROBLEM-TASK PROBLEM))))
   (IS (EQL 'ASGL::GROUNDED (NAME (PROBLEM-SEMANTIC PROBLEM))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.20 "
TASK:                         DC
SEMANTIC:                     ST
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             STRING
ARG-TYPE:                     STRING
ARG-CONTAINED-IN-GRAPH:       T
GRAPH-INPUT-FILE-EXISTS:      T
"
 (WITH-TMP-FILE-CONTAINING ("arg(foo)." "arg(bar)." "att(foo,bar).") PATHNAME
  (ASSERT (PATHNAMEP PATHNAME))
  (LET ((PROBLEM
         (MAKE-PROBLEM :GRAPH-INPUT (NAMESTRING PATHNAME) :TASK-SEMANTIC
          "DC-ST" :QUERY-ARGUMENT-NAME "foo")))
    (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
    (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
    (IS (EQL 0 (PROBLEM-QUERY-ARGUMENT PROBLEM)))
    (IS (EQUAL "foo" (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
    (IS (EQUALP #("foo" "bar") (PROBLEM-ARGUMENT-NAMES PROBLEM)))
    (IS (EQL 'ASGL::DC-TASK (NAME (PROBLEM-TASK PROBLEM))))
    (IS (EQL 'ASGL::STABLE (NAME (PROBLEM-SEMANTIC PROBLEM)))))))

(DEFTEST MAKE-PROBLEM.CLI.COMB.21 "
TASK:                         EE
SEMANTIC:                     PR
TASK-SEMANTIC-TYPE:           STRING
GRAPH-INPUT-TYPE:             CONS
ARG-TYPE:                     NULL
ARG-CONTAINED-IN-GRAPH:       NO-ARG
GRAPH-INPUT-FILE-EXISTS:      NO-FILE-INPUT
"
 (LET ((PROBLEM
        (MAKE-PROBLEM :GRAPH-INPUT '(2 . 4) :TASK-SEMANTIC "EE-PR"
         :QUERY-ARGUMENT-NAME NIL)))
   (IS-TRUE (TYPEP PROBLEM 'PROBLEM-WITH-RESULT-PRINTED))
   (IS (EQUALP #(NIL (0)) (PROBLEM-GRAPH PROBLEM)))
   (IS (EQL NIL (PROBLEM-QUERY-ARGUMENT PROBLEM)))
   (IS (EQUAL NIL (PROBLEM-QUERY-ARGUMENT-NAME PROBLEM)))
   (IS (EQUALP #(0 1) (PROBLEM-ARGUMENT-NAMES PROBLEM)))
   (IS (EQL 'ASGL::EE-TASK (NAME (PROBLEM-TASK PROBLEM))))
   (IS (EQL 'ASGL::PREFERRED (NAME (PROBLEM-SEMANTIC PROBLEM))))))

